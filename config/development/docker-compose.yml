services:
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    ports:
      - "${SERVER_PORT:-8000}:8000"
    volumes:
      - ../../backend/app:/app/app
      - ../../backend/src:/app/src
      - ../../backend/tests:/app/tests
      - ../../data:/app/data
      - ../../tools:/app/tools
      - chroma_data:/app/chroma_db
      - ../../logs:/app/logs
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app:/app/src
      - ENVIRONMENT=development
      - SERVER_HOST=http://localhost
      - POSTGRES_SERVER=postgres
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 400s
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - default

  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-legal_ai}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  chroma_data:
  postgres_data:
